AWSTemplateFormatVersion: "2010-09-09"
Resources:
    OrderTable:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: "OrderTable"
            AttributeDefinitions:
                - AttributeName: "OrderId"
                  AttributeType: "S"
            KeySchema:
                - AttributeName: "OrderId"
                  KeyType: "HASH"
            BillingMode: PAY_PER_REQUEST
            SSESpecification:
                SSEEnabled: true
                KMSMasterKeyId: "arn:aws:kms:eu-central-1:345993273055:key/73b7abd4-31fd-4e3d-bffe-d9dc4c751803"

    ShoeTable:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: "ShoeTable"
            AttributeDefinitions:
                - AttributeName: "ShoeId"
                  AttributeType: "S"
            KeySchema:
                - AttributeName: "ShoeId"
                  KeyType: "HASH"
            BillingMode: PAY_PER_REQUEST
            SSESpecification:
                SSEEnabled: true
                KMSMasterKeyId: "arn:aws:kms:eu-central-1:345993273055:key/73b7abd4-31fd-4e3d-bffe-d9dc4c751803"

    ShoeStoreGraphQLApi:
        Type: AWS::AppSync::GraphQLApi
        Properties:
            Name: "Shoe Store API"
            AuthenticationType: API_KEY

    ShoeStoreGraphQLSchema:
        Type: AWS::AppSync::GraphQLSchema
        Properties:
            ApiId: !GetAtt ShoeStoreGraphQLApi.ApiId
            Definition: |
                type Query {
                  getShoe(ShoeId: ID!): Shoe
                  listShoes(
                    filter: TableShoeFilterInput,
                    limit: Int,
                    nextToken: String,
                    sortField: String,
                    sortOrder: String
                  ): ShoeConnection
                  getOrder(OrderId: ID!): Order
                  listOrders(filter: TableOrderFilterInput, limit: Int, nextToken: String): OrderConnection
                }

                type Mutation {
                  createShoe(input: CreateShoeInput!): Shoe
                  updateShoe(input: UpdateShoeInput!): Shoe
                  deleteShoe(input: DeleteShoeInput!): Shoe
                  createOrder(input: CreateOrderInput!): Order
                  updateOrder(input: UpdateOrderInput!): Order
                  deleteOrder(input: DeleteOrderInput!): Order
                }

                type Subscription {
                  onCreateShoe(
                    ShoeId: ID,
                    Brand: String,
                    Model: String,
                    Price: Float,
                    Image: String
                  ): Shoe
                    @aws_subscribe(mutations: ["createShoe"])
                  onUpdateShoe(
                    ShoeId: ID,
                    Brand: String,
                    Model: String,
                    Price: Float,
                    Image: String
                  ): Shoe
                    @aws_subscribe(mutations: ["updateShoe"])
                  onDeleteShoe(
                    ShoeId: ID,
                    Brand: String,
                    Model: String,
                    Price: Float,
                    Image: String
                  ): Shoe
                    @aws_subscribe(mutations: ["deleteShoe"])
                  onCreateOrder(
                    OrderId: ID,
                    FullName: String,
                    EmailAddress: String,
                    PhoneNumber: String,
                    StreetAddress: String
                  ): Order
                    @aws_subscribe(mutations: ["createOrder"])
                  onUpdateOrder(
                    OrderId: ID,
                    FullName: String,
                    EmailAddress: String,
                    PhoneNumber: String,
                    StreetAddress: String
                  ): Order
                    @aws_subscribe(mutations: ["updateOrder"])
                  onDeleteOrder(
                    OrderId: ID,
                    FullName: String,
                    EmailAddress: String,
                    PhoneNumber: String,
                    StreetAddress: String
                  ): Order
                    @aws_subscribe(mutations: ["deleteOrder"])
                }

                input CreateOrderInput {
                  OrderId: ID!
                  FullName: String!
                  EmailAddress: String
                  PhoneNumber: String!
                  StreetAddress: String!
                  AddressLine2: String
                  CityTown: String!
                  StateProvinceRegion: String
                  PostCode: String!
                  Country: String!
                  Size: [Int!]!
                  ShoeId: [ID!]!
                }

                input CreateShoeInput {
                  ShoeId: ID!
                  Brand: String!
                  Model: String!
                  Price: Float!
                  Image: String!
                  AvailableSizes: [Int!]!
                }

                input DeleteOrderInput {
                  OrderId: ID!
                }

                input DeleteShoeInput {
                  ShoeId: ID!
                }

                input ModelSizeInput {
                  ne: Int
                  eq: Int
                  le: Int
                  lt: Int
                  ge: Int
                  gt: Int
                  between: [Int]
                }

                type Order {
                  OrderId: ID!
                  FullName: String!
                  EmailAddress: String
                  PhoneNumber: String!
                  StreetAddress: String!
                  AddressLine2: String
                  CityTown: String!
                  StateProvinceRegion: String
                  PostCode: String!
                  Country: String!
                  ShoeId: [ID!]!
                  Size: [Int!]!
                }

                type OrderConnection {
                  items: [Order]
                  nextToken: String
                }

                type Shoe {
                  ShoeId: ID!
                  Brand: String!
                  Model: String!
                  Price: Float!
                  Image: String!
                  AvailableSizes: [Int!]!
                }

                type ShoeConnection {
                  items: [Shoe]
                  nextToken: String
                }

                input TableBooleanFilterInput {
                  ne: Boolean
                  eq: Boolean
                  attributeExists: Boolean
                }

                input TableFloatFilterInput {
                  ne: Float
                  eq: Float
                  le: Float
                  lt: Float
                  ge: Float
                  gt: Float
                  between: [Float]
                  attributeExists: Boolean
                }

                input TableIDFilterInput {
                  ne: ID
                  eq: ID
                  le: ID
                  lt: ID
                  ge: ID
                  gt: ID
                  contains: ID
                  notContains: ID
                  between: [ID]
                  beginsWith: ID
                  attributeExists: Boolean
                  size: ModelSizeInput
                }

                input TableIntFilterInput {
                  ne: Int
                  eq: Int
                  le: Int
                  lt: Int
                  ge: Int
                  gt: Int
                  between: [Int]
                  attributeExists: Boolean
                }

                input TableOrderFilterInput {
                  OrderId: TableIDFilterInput
                  FullName: TableStringFilterInput
                  EmailAddress: TableStringFilterInput
                  PhoneNumber: TableStringFilterInput
                  StreetAddress: TableStringFilterInput
                  AddressLine2: TableStringFilterInput
                  CityTown: TableStringFilterInput
                  StateProvinceRegion: TableStringFilterInput
                  PostCode: TableStringFilterInput
                  Country: TableStringFilterInput
                  ShoeId: TableIDFilterInput
                  Size: TableIntFilterInput
                }

                input TableShoeFilterInput {
                  ShoeId: TableIDFilterInput
                  Brand: TableStringFilterInput
                  Model: TableStringFilterInput
                  Price: TableFloatFilterInput
                  Image: TableStringFilterInput
                  AvailableSizes: TableIntFilterInput
                }

                input TableStringFilterInput {
                  ne: String
                  eq: String
                  le: String
                  lt: String
                  ge: String
                  gt: String
                  contains: String
                  notContains: String
                  between: [String]
                  beginsWith: String
                  attributeExists: Boolean
                  size: ModelSizeInput
                }

                input UpdateOrderInput {
                  OrderId: ID!
                  FullName: String
                  EmailAddress: String
                  PhoneNumber: String
                  StreetAddress: String
                  AddressLine2: String
                  CityTown: String
                  StateProvinceRegion: String
                  PostCode: String
                  Country: String
                  ShoeId: [ID!]!
                  Size: [Int!]
                }

                input UpdateShoeInput {
                  ShoeId: ID!
                  Brand: String
                  Model: String
                  Price: Float
                  Image: String
                  AvailableSizes: [Int!]
                }

    OrderTableDataSource:
        Type: AWS::AppSync::DataSource
        Properties:
            ApiId: !GetAtt ShoeStoreGraphQLApi.ApiId
            Name: "OrderTableDataSource"
            Type: AMAZON_DYNAMODB
            DynamoDBConfig:
                TableName: !Ref OrderTable
                AwsRegion: !Ref "AWS::Region"
            ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn

    ShoeTableDataSource:
        Type: AWS::AppSync::DataSource
        Properties:
            ApiId: !GetAtt ShoeStoreGraphQLApi.ApiId
            Name: "ShoeTableDataSource"
            Type: AMAZON_DYNAMODB
            DynamoDBConfig:
                TableName: !Ref ShoeTable
                AwsRegion: !Ref "AWS::Region"
            ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn

    AppSyncServiceRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: appsync.amazonaws.com
                      Action: sts:AssumeRole
            Policies:
                - PolicyName: "AppSyncServicePolicy"
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: Allow
                            Action:
                                - dynamodb:Query
                                - dynamodb:Scan
                                - dynamodb:GetItem
                                - dynamodb:PutItem
                                - dynamodb:UpdateItem
                                - dynamodb:DeleteItem
                            Resource: "*"
